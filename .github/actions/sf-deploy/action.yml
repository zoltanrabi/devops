name: Salesforce Metadata Deploy
description: Builds and deploys metadata to a specified environment
author: jawills
branding:
  icon: code
  color: blue
inputs:
  DRY_RUN:
    description: "Validate deploy and run Apex tests but don't save to the org."
    type: boolean
  EXCLUDE_CLASSES:
    description: "List of Apex classes to exclude from deployment and testing."
    type: string
    default: ""
  TEST_LEVEL:
    description: "Deployment Apex testing level."
    type: choice
    default: RunLocalTests
    options:
      - NoTestRun
      - RunSpecifiedTests
      - RunLocalTests
      - RunAllTestsInOrg
  WAIT:
    description: "Number of minutes to wait for command to complete and display results."
    type: number
    default: 30
  SOURCE_DIRECTORY:
    description: "Path to the local source files to deploy."
    type: string
    default: force-app
  SFDX_AUTH_URL:
    description: "The auth url tied to your deployment environment"
    type: string
    required: true

runs:
  using: "composite"
  steps:
    - name: Install Salesforce CLI
      shell: bash
      run: |
        npm install -g @salesforce/cli
        sf --version
    - name: Login to Environment
      shell: bash
      run: |
        sf org login sfdx-url --set-default --sfdx-url-file <(echo "${{ inputs.SFDX_AUTH_URL }}")
    - name: Generate package.xml
      shell: bash
      run: |
        excludedClasses=${{ inputs.EXCLUDE_CLASSES }}
        excludeArray=(${excludedClasses//,/ })
        
        find ${{ inputs.SOURCE_DIRECTORY }} -name '*.cls' > allClasses.txt
        echo '<?xml version="1.0" encoding="UTF-8"?>' > manifest/package.xml
        echo '<Package xmlns="http://soap.sforce.com/2006/04/metadata">' >> manifest/package.xml
        echo '  <types>' >> manifest/package.xml

        while IFS= read -r classFile; do
          className=$(basename "$classFile" .cls)
          skip=false
          for exclude in "${excludeArray[@]}"; do
            if [ "$className" == "$exclude" ]; then
              skip=true
              break
            fi
          done
          if [ "$skip" = false ]; then
            echo "    <members>$className</members>" >> manifest/package.xml
          fi
        done < allClasses.txt
        
        echo '    <name>ApexClass</name>' >> manifest/package.xml
        echo '  </types>' >> manifest/package.xml
        echo '  <version>52.0</version>' >> manifest/package.xml
        echo '</Package>' >> manifest/package.xml
    - name: Deploy to Environment
      shell: bash
      run: |
        deployFlags=(
            --manifest manifest/package.xml
            --wait ${{ inputs.WAIT }}
            --test-level ${{ inputs.TEST_LEVEL }}
            --verbose
          )
        if [ "${{ inputs.DRY_RUN }}" = "true" ]; then
          deployFlags+=( --dry-run )
        fi
        sf project deploy start "${deployFlags[@]}"
