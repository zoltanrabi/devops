name: Salesforce Metadata Deploy
description: Builds and deploys metadata to a specified environment
author: jawills
branding:
  icon: code
  color: blue

inputs:
  DRY_RUN:
    description: "Validate deploy and run Apex tests but don't save to the org."
    type: boolean
  MODIFIED_COMPONENTS:
    description: "List of modified Apex classes and triggers."
    type: string
    required: true
  TEST_LEVEL:
    description: "Deployment Apex testing level."
    type: choice
    default: RunLocalTests
    options:
      - NoTestRun
      - RunSpecifiedTests
      - RunLocalTests
      - RunAllTestsInOrg
  WAIT:
    description: "Number of minutes to wait for command to complete and display results."
    type: number
    default: 30
  SOURCE_DIRECTORY:
    description: "Path to the local source files to deploy."
    type: string
    default: force-app
  SFDX_AUTH_URL:
    description: "The auth url tied to your deployment environment"
    type: string
    required: true

runs:
  using: "composite"
  steps:
    - name: Install Salesforce CLI
      shell: bash
      run: |
        npm install -g @salesforce/cli
        sf --version
        echo y | sf plugins:install sfdx-git-delta
    - name: Login to Environment
      shell: bash
      run: |
        sf org login sfdx-url --set-default --sfdx-url-file <(echo "${{ inputs.SFDX_AUTH_URL }}")
    - name: Generate package.xml
      shell: bash
      run: |
        sf sgd:source:delta --to "HEAD" --from "HEAD~1" --output '.'
        echo "Deployment package:"
        cat package/package.xml
        echo "Destructive Changes:"
        cat destructiveChanges/destructiveChanges.xml
    - name: Deploy to Environment
      shell: bash
      run: |
        deployFlags=(
            --manifest package/package.xml
            --post-destructive-changes destructiveChanges/destructiveChanges.xml
            --wait ${{ inputs.WAIT }}
            --test-level ${{ inputs.TEST_LEVEL }}
        )
        if [ "${{ inputs.DRY_RUN }}" = "true" ]; then
          deployFlags+=( --dry-run )
        fi
        sf project deploy start "${deployFlags[@]}"
