name: Salesforce Metadata Deploy
description: Builds and validate deployments to a specified environment
author: accadzo
branding:
  icon: code
  color: blue

inputs:
  DRY_RUN:
    description: "Validate deploy and run Apex tests but don't save to the org."
    type: boolean
  DESTRUCIVE:
    description: "Is destructive delta to be deleted."
    type: boolean
    default: true
  TEST_LEVEL:
    description: "Deployment Apex testing level."
    type: choice
    default: RunLocalTests
    options:
      - NoTestRun
      - RunSpecifiedTests
      - RunLocalTests
      - RunAllTestsInOrg
  WAIT:
    description: "Number of minutes to wait for command to complete and display results."
    type: number
    default: 30
  SFDX_AUTH_URL:
    description: "The authorization URL for the deployment environment"
    type: string
    required: true
  DEPLOY_TYPE:
    description: "Validate only delta package or full"
    type: string

runs:
  using: "composite"
  steps:
    - name: Install Salesforce CLI
      shell: bash
      run: |
        npm install -g @salesforce/cli
        echo y | sf plugins:install sfdx-git-delta  

    - name: Login to Environment
      shell: bash
      run: |
        sf org login sfdx-url --set-default --sfdx-url-file <(echo "${{ inputs.SFDX_AUTH_URL }}")

    - name: Fetch branches
      shell: bash
      run: |
        git fetch origin ${{ github.event.pull_request.base.ref }}:${{ github.event.pull_request.base.ref }}
        git fetch origin ${{ github.event.pull_request.head.ref }}:${{ github.event.pull_request.head.ref }}

    - name: Generate package.xml
      if: ${{ inputs.DEPLOY_TYPE == 'DELTA' }}
      shell: bash
      run: |
        BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
        COMPARE_BRANCH="${{ github.event.pull_request.head.ref }}"
        sf sgd:source:delta --to "refs/heads/$COMPARE_BRANCH" --from "refs/heads/$BASE_BRANCH" --output '.'
        echo "Deployment package:"
        cat package/package.xml
        echo -e "\nDestructive Changes:"
        cat destructiveChanges/destructiveChanges.xml

    - name: Collect test classes
      if: ${{ inputs.TEST_LEVEL == 'RunSpecifiedTests' }}
      shell: bash
      run: |
        TESTS=$(python ./.github/scripts/testCollector.py)
        echo "TEST_LIST=$TESTS" >> $GITHUB_ENV
        echo "The following tests were specified to run:" $TESTS

    - name: Validate Deployment to Environment
      shell: bash
      run: |
        deployFlags=(
            --wait ${{ inputs.WAIT }}
        )
        if [[ "${{ inputs.DEPLOY_TYPE }}" == "DELTA" ]]; then
          deployFlags+=( --manifest package/package.xml )
        fi
        if [[ "${{ inputs.DEPLOY_TYPE }}" == "FULL" ]]; then
          deployFlags+=( --source-dir force-app )
        fi
        if [ "${{ inputs.DESTRUCIVE }}" = "true" ]; then
          deployFlags+=( --post-destructive-changes destructiveChanges/destructiveChanges.xml )
          deployFlags+=( --ignore-warnings )
        fi
        if [[ "${{ inputs.TEST_LEVEL }}" == "RunSpecifiedTests" && -n "$TEST_LIST" ]]; then
          deployFlags+=( --test-level ${{ inputs.TEST_LEVEL }} )
          deployFlags+=( --tests $TEST_LIST )
          echo "Test runs in the following mode: RunSpecifiedTests"
        fi
        if [[ "${{ inputs.TEST_LEVEL }}" != "RunSpecifiedTests" ]]; then
          deployFlags+=( --test-level ${{ inputs.TEST_LEVEL }} )
          echo "Test runs in the following mode: "${{ inputs.TEST_LEVEL }}
        fi
        if [[ "${{ inputs.TEST_LEVEL }}" == "RunSpecifiedTests" && -z "$TEST_LIST" ]]; then
          deployFlags+=( --test-level NoTestRun )
          echo "Test runs in the following mode: NoTestRun"
        fi
        if [ "${{ inputs.DRY_RUN }}" = "true" ]; then
          deployFlags+=( --dry-run )
        fi
        sf project deploy start "${deployFlags[@]}"